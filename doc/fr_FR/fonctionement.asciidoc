= Fonctionnement et Utilisation des équipements

Le plug-in n'exécute que très peu de tache en automatique, il met simplement à disponibilité des équipements et des commandes à utiliser dans vos propres scenarios. Des exemples de scenarios sont disponible dans cette documentation.
Les entrées analogiques fonctionnent comme des badges. Pour les paramétrer référez vous à la documentation concernant les badges.

== Fonctions automatiques

En automatique le plug-in va gérer la présentation de codes faux et de badges inconnu en bloquant le lecteur pendant une période donnée. Les paramètres de chaque lecteur ajustent cette fonctionnalité, elle est très importante en termes de sécurité. Elle permet de bloquer une attaque brute du lecteur. 
Lorsqu’un lecteur atteint sa limite de code faux, la commande "PinTryLimit" (type info-string) est déclenchée et une erreur est inscrite dans les logs.
Lorsqu’un lecteur atteint sa limite de badges inconnu, la commande "TagTryLimit" (type info-string) est déclenchée et une erreur est inscrite dans les logs.
On peut alors déclencher un scenario sur ces commandes pour prévenir quelqu’un, déclencher une "pré" alarme .. etc.

== Fonctions configurable dans jeedom

=== Test de présentation de badge ou code

Lors de la présentation d'un code ou d'un badge connu et actif, la commande "Presentation" (type info-string) est déclenchée, cette commande contient un texte avec le format suivant :  (Date) (Heure) - (Nom du lecteur utilisé)
La commande "BadgerID" (type info-string) est aussi mise à jour avec le nom du lecteur utilisé.

Ces commandes peuvent être utilisées dans un scenario pour déclencher une action (ouverture de porte, désactivation d'alarme ...)
Voici un premier exemple simple :

image::../images/Screen6.png[]
Ce scenario simple est déclenché par la présentation d'un code ou d'un badge. On peut ajouter d'autres codes ou badge comme déclencheurs. 

image::../images/Screen7.png[]
Ici le scenario test sur quel lecteur le code ou badge a été présenté. Et dans ce cas il pourrait déclencher l'ouverture d'une porte associée à ce lecteur.  Ici je mets juste à jours une variable debug pour la démo.

Un deuxième exemple plus complexe, nous voulons une double authentification badge + code :

image::../images/Screen8.png[]
Ce scenario simple est déclenché uniquement par la présentation d'un badge précis. 

image::../images/Screen9.png[]
Ici le scenario test sur quel lecteur le code ou badge a été présenté puis attend 20 secondes que le code défini soit entré. Si le bon code n'est pas entré dans les 20 secondes, le scenario est annulé et le badge doit être a nouveau présenté. 

=== Activation / Désactivation d'un code ou badge

En associant le plug-in agenda, on peut définir une plage horaire pendant laquelle un badge ou code sera actif. En utilisant la fonction activer / désactiver du scenario.

image::../images/Screen10.png[]

=== Génération d'un code temporaire

Les Codes dispose de 2 commandes supplémentaires pour générer, définir et obtenir une nouvelle valeur de code.
La commande "ChangePin" (type message string)  permet de définir ou de générer un nouveau code. La syntaxe de cette commande est la suivante :
[width="85%"",options="header"]
|=======
|Titre | Message | Description
|"set"	 	|Valeur du nouveau code | Défini un nouveau code 
|"rnd4"	 	| (vide)	| Génère un nouveau code aléatoire sur 4 chiffres
|"rnd6"	 	| (vide)	| Génère un nouveau code aléatoire sur 6 chiffres
|"rnd8"	 	| (vide)	| Génère un nouveau code aléatoire sur 8 chiffres
|=======

La commande "GetPin" (type info string) permet de récupérer la valeur courante du code.

Un scenario possible : pour donner accès temporairement a votre habitation a quelqu'un alors que vous n'avez pas accès a Jeedom :  déclenché par un sms, un scenario génère un code temporaire, l'active et renvoi sa valeur par sms. Le scenario désactive ce code au bout de 1 heure.
Comme il n'est pas possible de créer des nouveaux codes. Au préalable on aura créé un code nommé "temporaire" que l'on aura désactivé.



